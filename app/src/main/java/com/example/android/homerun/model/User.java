package com.example.android.homerun.model;

import com.google.firebase.database.FirebaseDatabase;

import java.util.Date;

/**
 * A class to represent a user
 */
public class User {
    private String name;
    private String username;
    private String password;
    private AccountType accountType;
    private String id;

    private String claimedShelterId;
    private String claimedSpots;

    private int incorrectLoginAttempts = 0;
    private Date lockoutDate = null;

    /**
     * Default constructor required for calls to DataSnapshot.getValue(User.class)
     */
    public User() {}

    /**
     * Parameterized constructor to create a new User object with the given data
     *
     * @param name name
     * @param username username
     * @param password password
     * @param accountType accountType
     */
    public User(String name, String username, String password, AccountType accountType) {
        this.name = name;
        this.username = username;
        this.password = password;
        this.accountType = accountType;
    }

    /**
     * Getter for name
     *
     * @return this User's name
     */
    public String getName() {return name;}

    /**
     * Getter for username
     *
     * @return this User's username
     */
    public String getUsername() {return username;}

    /**
     * Getter for password
     *
     * @return this User's password
     */
    public String getPassword() {return password;}

    /**
     * Getter for id
     *
     * @return this User's ID
     */
    public String getId() {return id;}

    /**
     * Getter for claimedShelterId
     *
     * @return this User's claimed shelter id
     */
    public String getClaimedShelterId() {return claimedShelterId;}

    /**
     * Getter for claimedSpots
     *
     * @return a String representation of this User's claimed shelter spots
     */
    public String getClaimedSpots() {return claimedSpots;}

    /**
     * Getter for accountType
     *
     * @return this User's account type as an AccountType type
     */
    public AccountType getAccountType() {return accountType;}

    public int getIncorrectLoginAttempts() {return incorrectLoginAttempts;}

    public Date getLockoutDate() {return lockoutDate;}

    /**
     * Setter for claimedShelterId
     *
     * @param s String representing the newly claimed shelter's ID
     */
    public void setClaimedShelterId(String s) {this.claimedShelterId = s;}

    public void firebaseSetClaimedShelterId(String s) {
        setClaimedShelterId(s);

        FirebaseDatabase.getInstance().getReference(FirebaseConstants.DATABASE_USERS).child(id)
                .child(FirebaseConstants.DATABASE_CLAIMED_SHELTER_ID)
                .setValue(claimedShelterId);
    }

    /**
     * Setter for claimedSpots
     *
     * @param s a String representation of this User's newly claimed shelter spots
     */
    public void setClaimedSpots(String s) {this.claimedSpots = s;}

    public void firebaseSetClaimedSpots(String s) {
        setClaimedSpots(s);

        FirebaseDatabase.getInstance().getReference(FirebaseConstants.DATABASE_USERS).child(id)
                .child(FirebaseConstants.DATABASE_CLAIMED_SPOTS)
                .setValue(claimedSpots);
    }

    /**
     * Setter for id (called so that the id generated by Firebase can be assigned to this User)
     *
     * @param id this User's ID
     */
    public void setId(String id) {this.id = id;}

    private void setIncorrectLoginAttempts(int s) {incorrectLoginAttempts = s;}

    private void firebaseSetIncorrectLoginAttempts(int s) {
        setIncorrectLoginAttempts(s);

        FirebaseDatabase.getInstance().getReference(FirebaseConstants.DATABASE_USERS).child(id)
                .child(FirebaseConstants.DATABASE_INCORRECT_LOGIN_ATTEMPTS)
                .setValue(incorrectLoginAttempts);
    }

    private void setLockoutDate(Date date) {lockoutDate = date;}

    private void firebaseSetLockoutDate(Date date) {
        setLockoutDate(date);

        FirebaseDatabase.getInstance().getReference(FirebaseConstants.DATABASE_USERS)
                .child(id)
                .child(FirebaseConstants.DATABASE_LOCKOUT_DATE)
                .setValue(lockoutDate);
    }

    public void handleIncorrectLoginAttempt() {
        firebaseSetIncorrectLoginAttempts(Math.min(3, incorrectLoginAttempts + 1));
        if (incorrectLoginAttempts == 3) {
            firebaseSetLockoutDate(new Date());
        }
    }

    public boolean isLockedOut() {
        if (lockoutDate == null) {
            return false;
        }
        // if lockoutDate is not null, then incorrectLoginAttempts == 3 is true
        Date cur = new Date();
        long diff = Math.abs(cur.getTime() - lockoutDate.getTime());
        final long ONE_DAY = 24 * 60 * 60 * 1000;
        long diffDays = diff / ONE_DAY;

        if (diffDays >= 1) {
            firebaseSetIncorrectLoginAttempts(0);
            firebaseSetLockoutDate(null);

            return false;
        }
        return true;
    }
}
